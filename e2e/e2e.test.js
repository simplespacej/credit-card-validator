const puppeteer = require('puppeteer');
const { fork } = require('child_process');

let browser;
let page;
let server;
const baseUrl = 'http://localhost:9000';

describe('Credit Card Validator E2E Tests', () => {
    beforeAll(async () => {
        server = fork(`${__dirname}/e2e.server.js`);
        
        // –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è
        await new Promise(resolve => setTimeout(resolve, 5000));

        browser = await puppeteer.launch({
            headless: true, 
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });

        page = await browser.newPage();

        // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±—Ä–∞—É–∑–µ—Ä–Ω–æ–π –∫–æ–Ω—Å–æ–ª–∏
        page.on('console', msg => console.log(`üñ•Ô∏è  Browser log:`, msg.text()));

        await page.goto(baseUrl, { waitUntil: 'networkidle2' });

        console.log('üöÄ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.');
    }, 60000);

    afterAll(async () => {
        if (browser) {
            await browser.close();
        }
        if (server) {
            server.kill();
        }
    });

    test('Should validate a correct Visa card', async () => {
        console.log('‚úçÔ∏è –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã...');
        await page.type('#card-number', '4111111111111111');

        console.log('üîò –ù–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏...');
        await page.click('#validate-button');

        console.log('‚è≥ –ñ–¥—ë–º 2 —Å–µ–∫—É–Ω–¥—ã...');
        await new Promise(resolve => setTimeout(resolve, 2000));

        console.log('üì∏ –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç...');
        await page.screenshot({ path: 'debug-screenshot.png' });

        console.log('üìÑ –ü–æ–ª—É—á–∞–µ–º HTML –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        const pageContent = await page.content();
        console.log(pageContent);

        console.log('üîç –ò—â–µ–º validation-message...');
        const messageExists = await page.$('#validation-message') !== null;
        console.log(`‚úÖ –≠–ª–µ–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω: ${messageExists}`);

        if (messageExists) {
            const validationText = await page.$eval('#validation-message', el => el.textContent);
            console.log(`üì¢ –¢–µ–∫—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏: "${validationText}"`);
        } else {
            console.log('‚ùå validation-message –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!');
        }

        console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è ‚úÖ –≤ validation-message...');
        await page.waitForFunction(
            () => document.querySelector('#validation-message')?.textContent.includes('‚úÖ'),
            { timeout: 10000 }
        );

        const validationMessage = await page.$eval('#validation-message', el => el.textContent);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${validationMessage}"`);
        expect(validationMessage).toContain('‚úÖ');
    }, 30000);
});
